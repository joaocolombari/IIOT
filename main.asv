% -------------------------------------- % 
%      IIOT - Homework 1                 %
%      Joao Victor Colombari Carlet      %
%      jvccarlet@usp.br                  %
% -------------------------------------- % 

%% Setup

close all 
clear

load("dressPass0001.mat");
load("dressPass0050.mat");
load("dressPass0150.mat");

Fs = 2e6;                   % Sampling frequency                    
T = 1/Fs;                   % Sampling period   

% Cuts the beggining and the end of the signal. Once the tool hasn't
% start passing yet, those parts are only noise. You can check the
% difference by comenting the following part or changing the filtred
% variable's name

dressPass0001 = cuts_signals(dressPass0001);
dressPass0050 = cuts_signals(dressPass0050);
dressPass0150 = cuts_signals(dressPass0150);

% All signals are being saved into structures in order to keep the
% workspace as clean as possible.

Y.dressPass0001 = dressPass0001;                    % Signal vectors
Y.dressPass0050 = dressPass0050;  
Y.dressPass0150 = dressPass0150;  

X.dressPass0001 = (0:length(dressPass0001)-1)*T;    % Time vectors
X.dressPass0050 = (0:length(dressPass0050)-1)*T;   
X.dressPass0150 = (0:length(dressPass0150)-1)*T;    

% Clears old variables 

clear dressPass0001; clear dressPass0050; clear dressPass0150;
clear filtered_dressPass0001; clear filtered_dressPass0050; clear filtered_dressPass0150;

%% A fazer

% - Verificar a escala dos graficos nas comparacoes

% - Trocar os arquivos do link do drive para os sem corte 

%% Step a
% Using Matlab, plot the three signals in the same figure, using the 
% subplot function, and adjust the x-axis scale to be in time 
% (in seconds), instead of the number of samples.

% Plot 
figure(1); 
sgtitle('Cutted signals');
subplot(3,1,1); plot(X.dressPass0001,Y.dressPass0001); 
title('Sample 1'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,1,2); plot(X.dressPass0050,Y.dressPass0050); 
title('Sample 2'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,1,3); plot(X.dressPass0150,Y.dressPass0150);
title('Sample 3'); ylabel('Amplitude'); xlabel('Time [s]');

%% Step b
% Obtain the frequency spectrum of the 3 signals using the Fast Fourier 
% Transform (FFT). Develop a script to perform this calculation for a 
% Hanning window of 8192 samples from a pure section of the signal. Plot 
% the resulting spectrum of each signal in a graph (containing the 3 
% signals in the same graph using the "hold on" function). Format the graph
% using legends, axis labels, appropriate font size and style. Adjust the 
% frequency scale (x-axis of the graph) to the range of 500 Hz to 15 kHz.
% Save the graph in ".fig" and ".jpg" formats (present in a text editor the 
% ".jpg" graph, the script used, and the steps of the process).

% Defining the graph's parameters 
f_min = 500;            % Hz
f_max = 15000;          % Hz

% Hanning windo with 8192 samples
window_length = 8192;
num_windows = 10;
hanning_window = hann(window_length);
X.freq_axis_8192 = linspace(0, Fs/2, window_length/2);

% Calculating FFT: signal_fft = FFT_hanning(signal, Fs, window_length)
Y.dressPass0001_fft_8192 = FFT_hanning(Y.dressPass0001,window_length,num_windows);
Y.dressPass0050_fft_8192 = FFT_hanning(Y.dressPass0050,window_length,num_windows);
Y.dressPass0150_fft_8192 = FFT_hanning(Y.dressPass0150,window_length,num_windows);

% Plots without the frequency cut 
figure(2); 
sgtitle('Unfiltered signals, whole spectrum');
subplot(3,1,1); plot(X.freq_axis_8192, Y.dressPass0001_fft_8192);
title('Sample 1'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,2); plot(X.freq_axis_8192, Y.dressPass0050_fft_8192); 
title('Sample 2'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,3); plot(X.freq_axis_8192, Y.dressPass0150_fft_8192); 
title('Sample 3'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

% Plots cutting between 500 and 15kHz
figure(3); 
sgtitle('Unfiltered signals, spectrum of interest');
subplot(3,1,1); plot(X.freq_axis_8192, Y.dressPass0001_fft_8192);
xlim([500 15e3]);
title('Sample 1'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,2); plot(X.freq_axis_8192, Y.dressPass0050_fft_8192); 
xlim([500 15e3]);
title('Sample 2'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,3); plot(X.freq_axis_8192, Y.dressPass0150_fft_8192); 
xlim([500 15e3]);
title('Sample 3'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

% It can be seen that the 8192 samples is quite small. The symptoms are
% the rougth traces. It can be made better increasing it!

% Compares between window sizes
% Hanning windo with 4*8192 samples
window_length = 4*8192;
num_windows = 10;
hanning_window = hann(window_length);
X.freq_axis_32768 = linspace(0, Fs/2, window_length/2);

% Calculating FFT: signal_fft = FFT_hanning(signal, Fs, window_length)
Y.dressPass0001_fft_32768 = FFT_hanning(Y.dressPass0001,window_length,num_windows);
Y.dressPass0050_fft_32768 = FFT_hanning(Y.dressPass0050,window_length,num_windows);
Y.dressPass0150_fft_32768 = FFT_hanning(Y.dressPass0150,window_length,num_windows);

figure(4); 
sgtitle('Comparisson between window sizes');
subplot(3,2,1); plot(X.freq_axis_8192, Y.dressPass0001_fft_8192);
xlim([500 15e3]);
title('Sample 1, 8192 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,2); plot(X.freq_axis_32768, Y.dressPass0001_fft_32768);
xlim([500 15e3]);
title('Sample 1, 32768 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,3); plot(X.freq_axis_8192, Y.dressPass0050_fft_8192); 
xlim([500 15e3]);
title('Sample 2, 8192 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,4); plot(X.freq_axis_32768, Y.dressPass0050_fft_32768); 
xlim([500 15e3]);
title('Sample 2, 32768 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,5); plot(X.freq_axis_8192, Y.dressPass0150_fft_8192); 
xlim([500 15e3]);
title('Sample 3, 8192 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,6); plot(X.freq_axis_32768, Y.dressPass0150_fft_32768); 
xlim([500 15e3]);
title('Sample 3, 32768 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

%% Step c

% Observing the original graph in MATLAB (.fig), select a frequency band
% that best represents the conditions of the process explained earlier,
% that is, which represent the 3 conditions summarizing the process: 
% new tool, intermediate, and worn-out, based on the intensity and 
% frequency of the signals

% It was already shown that the 32768 point window giver a better view, so
% for this we will use it

% Plots cutting between 500 and 15kHz usign the 32768 points window
figure(5); 
sgtitle('Unfiltered signals, spectrum of interest, corrected widow size');
subplot(3,1,1); plot(X.freq_axis_32768, Y.dressPass0001_fft_32768);
xlim([500 15e3]);
title('Sample 1'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,2); plot(X.freq_axis_32768, Y.dressPass0050_fft_32768); 
xlim([500 15e3]);
title('Sample 2'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,3); plot(X.freq_axis_32768, Y.dressPass0150_fft_32768); 
xlim([500 15e3]);
title('Sample 3'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

%% Step d

% From the selection of this band, apply band-pass filters in the chosen 
% band on the 3 signals in the time domain, implementing the provided 
% function: "BandPassFilter‚Äù (Butterworth IIR Filter, use order 5)

% Filters for 15kHz and saves into workspace. It checks if there are
% already filtered signals in the directory. If not, it calls
% "filters_signals.m", that uses the "iir_filer.m" function to apply a
% fifth order bandpass filter from 500 to 15kHz

exists_0001 = exist('filtered_dressPass0001.mat', 'file');
exists_0050 = exist('filtered_dressPass0050.mat', 'file');
exists_0150 = exist('filtered_dressPass0150.mat', 'file');

if ~(exists_0001 && exists_0050 && exists_0150)
    run('filters_signals.m');
end

clear exists_0001; clear exists_0050; clear exists_0150;

load("filtered_dressPass0001.mat");
load("filtered_dressPass0050.mat");
load("filtered_dressPass0150.mat");

Y.filtered_dressPass0001 = filtered_dressPass0001;  
Y.filtered_dressPass0050 = filtered_dressPass0050; 
Y.filtered_dressPass0150 = filtered_dressPass0150;  

X.filtered_dressPass0001 = (0:length(Y.filtered_dressPass0001)-1)*T;   
X.filtered_dressPass0050 = (0:length(Y.filtered_dressPass0050)-1)*T;   
X.filtered_dressPass0150 = (0:length(Y.filtered_dressPass0150)-1)*T;  

Y.filtered_dressPass0001_fft_32768 = FFT_hanning(Y.filtered_dressPass0001,window_length,num_windows);
Y.filtered_dressPass0050_fft_32768 = FFT_hanning(Y.filtered_dressPass0050,window_length,num_windows);
Y.filtered_dressPass0150_fft_32768 = FFT_hanning(Y.filtered_dressPass0150,window_length,num_windows);

clear filtered_dressPass0001; clear filtered_dressPass0050; 
clear filtered_dressPass0150;

% Compares filtered to unfiltered signals in time dommain 
figure(6); 
sgtitle('Filtered to unfiltered signals comparisson in time dommain');
subplot(3,2,1); plot(X.dressPass0001, Y.dressPass0001);
title('Sample 1, unfiltered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,2); plot(X.filtered_dressPass0001, Y.filtered_dressPass0001);
title('Sample 1, filtered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,3); plot(X.dressPass0050, Y.dressPass0050);
title('Sample 2, unfiltered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,4); plot(X.filtered_dressPass0050, Y.filtered_dressPass0050);
title('Sample 2, filtered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,5); plot(X.dressPass0150, Y.dressPass0150);
title('Sample 3, unfiltered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,6); plot(X.filtered_dressPass0150, Y.filtered_dressPass0150);
title('Sample 3, filtered'); ylabel('Amplitude'); xlabel('Time [s]');

% Compares filtered to unfiltered signals in frequency dommain 
figure(7); 
sgtitle('Filtered to unfiltered signals comparisson in frequency dommain');
subplot(3,2,1); plot(X.freq_axis_32768, Y.dressPass0001_fft_32768);
title('Sample 1, unfiltered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,2); plot(X.freq_axis_32768, Y.filtered_dressPass0001_fft_32768);
title('Sample 1, filtered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,3); plot(X.freq_axis_32768, Y.dressPass0050_fft_32768);
title('Sample 2, unfiltered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,4); plot(X.freq_axis_32768, Y.filtered_dressPass0050_fft_32768);
title('Sample 2, filtered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,5); plot(X.freq_axis_32768, Y.dressPass0150_fft_32768);
title('Sample 3, unfiltered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,6); plot(X.freq_axis_32768, Y.filtered_dressPass0150_fft_32768);
title('Sample 3, filtered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

%% Step e

% Calculate the RMS (root mean square) for the filtered signals, resulting 
% from the process requested in item "c", considering blocks of 2048 samples 
% in the pure signal. Use the provided function ‚ÄúRMSCalculation‚Äù. Repeat the 
% process, calculating the RMS every 2048 samples for the pure (unfiltered) 
% signals. Plot the signals of each condition (RMS with and without filter) 
% on the same graph using the ‚Äúhold on‚Äù command. Plot the 3 graphs in the 
% same figure using the subplot function. Format the graphs, adjusting 
% legends, axis labels, font size and style, etc. Save the files in ‚Äú.fig‚Äù 
% and ‚Äú.jpg‚Äù formats (to present in a document along with the developed 
% script and the steps performed).

% Defining block size
block_size = 2048;

% Now the function calculate_rms is used. It calculates the RMS for each 
% block of 'block_size' samples in the given vector. If there are leftover
% samples that won't fit the window size, calculate RMS for the last 
% partial window. Repeat each RMS value to match the window size for 
% consistent length, so the resulting vector's length matches the input's
% vector one

Y.rms_filtered_dressPass0001 = calculate_rms(Y.filtered_dressPass0001, block_size);
Y.rms_filtered_dressPass0050 = calculate_rms(Y.filtered_dressPass0050, block_size);
Y.rms_filtered_dressPass0150 = calculate_rms(Y.filtered_dressPass0150, block_size);

Y.rms_dressPass0001 = calculate_rms(Y.dressPass0001, block_size);
Y.rms_dressPass0050 = calculate_rms(Y.dressPass0050, block_size);
Y.rms_dressPass0150 = calculate_rms(Y.dressPass0150, block_size);

% Plots the resulting RMS vectors for filtered and unfiltered in the same
% graph
figure(8); 
sgtitle('Filtered to unfiltered RMS comparison')
subplot(3,1,1);
plot(X.filtered_dressPass0001, Y.rms_filtered_dressPass0001); hold on; 
plot(X.dressPass0001, Y.rms_dressPass0001); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('RMS'); 
title('RMS sample 1');
subplot(3,1,2);
plot(X.filtered_dressPass0050, Y.rms_filtered_dressPass0050); hold on; 
plot(X.dressPass0050, Y.rms_dressPass0050); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('RMS'); 
title('RMS sample 2');
subplot(3,1,3);
plot(X.filtered_dressPass0150, Y.rms_filtered_dressPass0150); hold on; 
plot(X.dressPass0150, Y.rms_dressPass0150);
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('RMS'); 
title('RMS sample 3');


%% Step f

% Calculate the mean value and standard deviation of the RMS signals obtained
% in item "d" for each of the three tool conditions, with and without filtering,
% and plot the results on the same graph (using MATLAB's "errorbar" command).
% Format the graph by adding a legend to identify the signals, adjusting font,
% axis labels, etc. Save the files in ".fig" and "jpg" formats (to present in
% a text document along with the developed script and the steps performed).

% I did not understand what was suposed to be done, so ill just do both
% ways possible:
%
%   - 1st: Calculate the mean over the whole vector and pick some points of
%   the filtered vector (not the RMS one) to calculate the errorbars 
% 
%   - 2nd: Calulate the windowed mean, and the windowed std for the
%   filtered signal (not RMS) and plot the mean with the std around it. In
%   this case, that I rather use, the errorbars are less usefull than a
%   shaded plot around the mean. Nevertheless the shaded plot consumes too
%   much computational resources, so I'll fake it by plotting both positive
%   and negative std dev

choice = 'none';  % Choose between '1st' or '2nd' options

switch choice
    case '1st'
        run("step_f_1st_choice.m");
    case '2nd'
        run("step_f_2nd_choice.m");
    case 'none'
        warning('Skiping Step f');
    otherwise
        error('Invalid choice. Please select either ''1st'' or ''2nd''.');
end

clear choice;

%% Step g

% Repeat steps e) and f) replacing RMS with the calculation of the signal's 
% energy, kurtosis, and skewness. However, for step f), calculate only the 
% mean, plot signals in a bar chart format, comparing the filtered signals 
% with the unfiltered ones

% Calculate energy, kurtosis, and skewness for each signal
Y.energy_filtered_dressPass0001 = calculate_energy(Y.filtered_dressPass0001, block_size);
Y.energy_filtered_dressPass0050 = calculate_energy(Y.filtered_dressPass0050, block_size);
Y.energy_filtered_dressPass0150 = calculate_energy(Y.filtered_dressPass0150, block_size);

Y.energy_dressPass0001 = calculate_energy(Y.dressPass0001, block_size);
Y.energy_dressPass0050 = calculate_energy(Y.dressPass0050, block_size);
Y.energy_dressPass0150 = calculate_energy(Y.dressPass0150, block_size);

Y.kurtosis_filtered_dressPass0001 = calculate_kurtosis(Y.filtered_dressPass0001, block_size);
Y.kurtosis_filtered_dressPass0050 = calculate_kurtosis(Y.filtered_dressPass0050, block_size);
Y.kurtosis_filtered_dressPass0150 = calculate_kurtosis(Y.filtered_dressPass0150, block_size);

Y.kurtosis_dressPass0001 = calculate_kurtosis(Y.dressPass0001, block_size);
Y.kurtosis_dressPass0050 = calculate_kurtosis(Y.dressPass0050, block_size);
Y.kurtosis_dressPass0150 = calculate_kurtosis(Y.dressPass0150, block_size);

Y.skewness_filtered_dressPass0001 = calculate_skewness(Y.filtered_dressPass0001, block_size);
Y.skewness_filtered_dressPass0050 = calculate_skewness(Y.filtered_dressPass0050, block_size);
Y.skewness_filtered_dressPass0150 = calculate_skewness(Y.filtered_dressPass0150, block_size);

Y.skewness_dressPass0001 = calculate_skewness(Y.dressPass0001, block_size);
Y.skewness_dressPass0050 = calculate_skewness(Y.dressPass0050, block_size);
Y.skewness_dressPass0150 = calculate_skewness(Y.dressPass0150, block_size);

% Plots the resulting vectors for each signal in the same graph
figure(10); 
sgtitle('Filtered to unfiltered comparison for Energy, Kurtosis, and Skewness')

% Plot energy
subplot(4,3,1);
plot(X.filtered_dressPass0001, Y.energy_filtered_dressPass0001); hold on; 
plot(X.dressPass0001, Y.energy_dressPass0001); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Energy'); 
title('Energy sample 1');
subplot(4,3,4);
plot(X.filtered_dressPass0050, Y.energy_filtered_dressPass0050); hold on; 
plot(X.dressPass0050, Y.energy_dressPass0050); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Energy'); 
title('Energy sample 2');
subplot(4,3,7);
plot(X.filtered_dressPass0150, Y.energy_filtered_dressPass0150); hold on; 
plot(X.dressPass0150, Y.energy_dressPass0150); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Energy'); 
title('Energy sample 3');

% Plot kurtosis
subplot(4,3,2);
plot(X.filtered_dressPass0001, Y.kurtosis_filtered_dressPass0001); hold on; 
plot(X.dressPass0001, Y.kurtosis_dressPass0001); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Kurtosis'); 
title('Kurtosis sample 1');
subplot(4,3,5);
plot(X.filtered_dressPass0050, Y.kurtosis_filtered_dressPass0050); hold on; 
plot(X.dressPass0050, Y.kurtosis_dressPass0050); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Kurtosis'); 
title('Kurtosis sample 2');
subplot(4,3,8);
plot(X.filtered_dressPass0150, Y.kurtosis_filtered_dressPass0150); hold on; 
plot(X.dressPass0150, Y.kurtosis_dressPass0150); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Kurtosis'); 
title('Kurtosis sample 3');

% Plot skewness
subplot(4,3,3);
plot(X.filtered_dressPass0001, Y.skewness_filtered_dressPass0001); hold on; 
plot(X.dressPass0001, Y.skewness_dressPass0001); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Skewness'); 
title('Skewness sample 1');
subplot(4,3,6);
plot(X.filtered_dressPass0050, Y.skewness_filtered_dressPass0050); hold on; 
plot(X.dressPass0050, Y.skewness_dressPass0050); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Skewness'); 
title('Skewness sample 2');
subplot(4,3,9);
plot(X.filtered_dressPass0150, Y.skewness_filtered_dressPass0150); hold on; 
plot(X.dressPass0150, Y.skewness_dressPass0150); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('Skewness'); 
title('Skewness sample 3');

% Calculate mean RMS values for each sample (unfiltered and filtered)
mean_rms_unfiltered = [mean(Y.rms_dressPass0001) mean(Y.rms_dressPass0050) mean(Y.rms_dressPass0150)];
mean_rms_unfiltered = mean_rms_unfiltered./max(mean_rms_unfiltered);

mean_rms_filtered.sample1 = [mean(Y.rms_filtered_dressPass0001) mean(Y.rms_filtered_dressPass0050) mean(Y.rms_filtered_dressPass0150)];
mean_rms_filtered = mean_rms_filtered./max(mean_rms_filtered);

% Calculate mean energy values for each sample (unfiltered and filtered)
mean_energy_unfiltered.sample1 = [mean(Y.energy_dressPass0001) mean(Y.energy_dressPass0050) mean(Y.energy_dressPass0150)];
mean_energy_unfiltered = mean_energy_unfiltered./max(mean_energy_unfiltered);

mean_energy_filtered.sample1 = [mean(Y.energy_filtered_dressPass0001) mean(Y.energy_filtered_dressPass0050) mean(Y.energy_filtered_dressPass0150)];
mean_energy_filtered = mean_energy_filtered./max(mean_energy_filtered);

% Calculate mean kurtosis values for each sample (unfiltered and filtered)
mean_kurtosis_unfiltered.sample1 = [mean(Y.kurtosis_dressPass0001) mean(Y.kurtosis_dressPass0050) mean(Y.kurtosis_dressPass0150)];
mean_kurtosis_unfiltered = mean_kurtosis_unfiltered./max(mean_kurtosis_unfiltered);

mean_kurtosis_filtered.sample1 = [mean(Y.kurtosis_filtered_dressPass0001) mean(Y.kurtosis_filtered_dressPass0050) mean(Y.kurtosis_filtered_dressPass0150)];
mean_kurtosis_filtered = mean_kurtosis_filtered./max(mean_kurtosis_filtered);

% Calculate mean skewness values for each sample (unfiltered and filtered)
mean_skewness_unfiltered.sample1 = [mean(Y.skewness_dressPass0001) mean(Y.skewness_dressPass0050) mean(Y.skewness_dressPass0150)];
mean_skewness_unfiltered = mean_skewness_unfiltered./max(mean_skewness_unfiltered);

mean_skewness_filtered.sample1 = [mean(Y.skewness_filtered_dressPass0001) mean(Y.skewness_filtered_dressPass0050) mean(Y.skewness_filtered_dressPass0150)];
mean_skewness_filtered = mean_skewness_filtered./max(mean_skewness_filtered);

% Assuming you have already calculated the mean values for each statistic

% Define the data
statistics = {'Energy', 'RMS', 'Kurtosis', 'Skewness'};

samples = {'Sample 1', 'Sample 2', 'Sample 3'};

mean_values_unfiltered = [
    % Energy values for each sample (unfiltered)
    [mean_energy_unfiltered(1), mean_rms_unfiltered(1), ...
     mean_kurtosis_unfiltered(1), mean_skewness_unfiltered(1)];

    [mean_energy_unfiltered(2), mean_rms_unfiltered(2), ...
     mean_kurtosis_unfiltered(2), mean_skewness_unfiltered(2)];

    [mean_energy_unfiltered(3), mean_rms_unfiltered(3), ...
     mean_kurtosis_unfiltered(3), mean_skewness_unfiltered(3)];
];

mean_values_filtered = [
    % Energy values for each sample (filtered)
    [mean_energy_filtered.sample1, mean_rms_filtered(1), ...
     mean_kurtosis_filtered.sample1, mean_skewness_filtered.sample1];

    [mean_energy_filtered(2), mean_rms_filtered(2), ...
     mean_kurtosis_filtered(2), mean_skewness_filtered(2)];

    [mean_energy_filtered(3), mean_rms_filtered(3), ...
     mean_kurtosis_filtered(3), mean_skewness_filtered(3)];
];

% Create the 3D bar plot
figure(11);
bar3(mean_values_unfiltered);

% Set labels and title
xlabel('Statistics');
ylabel('Samples');
zlabel('Mean Value');
title('Mean Statistics for Each Unfiltered Sample');

% Adjust tick labels
set(gca, 'XTickLabel', statistics, 'YTickLabel', samples);

% Add a color bar for reference
colorbar;

% Create the 3D bar plot
figure(12);
bar3(mean_values_filtered);

% Set labels and title
xlabel('Statistics');
ylabel('Samples');
zlabel('Mean Value');
title('Mean Statistics for Each Filtered Sample');

% Adjust tick labels
set(gca, 'XTickLabel', statistics, 'YTickLabel', samples);

% Add a color bar for reference
colorbar;


%% Histogram

% Number of bins for the histograms
num_bins = 50;

figure(12);
sgtitle('Histograms');

% Histogram for sample 1 (unfiltered)
subplot(3, 2, 1);
histogram(Y.dressPass0001, num_bins, 'Normalization', 'pdf');
title('Sample 1 (unfiltered)');
xlabel('Signal Value'); ylabel('Probability Density');
xlim([-2 2]);
ylim([0 15]);

% Histogram for sample 1 (filtered)
subplot(3, 2, 2);
histogram(Y.filtered_dressPass0001, num_bins, 'Normalization', 'pdf');
title('Sample 1 (filtered)');
xlabel('Signal Value'); ylabel('Probability Density');
xlim([-2 2]);
ylim([0 15]);

% Histogram for sample 2 (unfiltered)
subplot(3, 2, 3);
histogram(Y.dressPass0050, num_bins, 'Normalization', 'pdf');
title('Sample 2 (unfiltered)');
xlabel('Signal Value'); ylabel('Probability Density');
xlim([-2 2]);
ylim([0 15]);

% Histogram for sample 2 (filtered)
subplot(3, 2, 4);
histogram(Y.filtered_dressPass0050, num_bins, 'Normalization', 'pdf');
title('Sample 2 (filtered)');
xlabel('Signal Value'); ylabel('Probability Density');
xlim([-2 2]);
ylim([0 15]);

% Histogram for sample 3 (unfiltered)
subplot(3, 2, 5);
histogram(Y.dressPass0150, num_bins, 'Normalization', 'pdf');
title('Sample 3 (unfiltered)');
xlabel('Signal Value'); ylabel('Probability Density');
xlim([-2 2]);
ylim([0 15]);

% Histogram for sample 3 (filtered)
subplot(3, 2, 6);
histogram(Y.filtered_dressPass0150, num_bins, 'Normalization', 'pdf');
title('Sample 3 (filtered)');
xlabel('Signal Value'); ylabel('Probability Density');
xlim([-2 2]);
ylim([0 15]);

%% Spectrogram

new_Fs = 50e3; % New lower sampling frequency for downsampling

window_length = floor(window_length/(Fs/new_Fs));

% FFT parameters
OVERLAP = 0.75;

% Spectrogram dB scale
spectrogram_dB_scale = 60;

% Frequency range for the spectrogram
f_range = [0 15e3];

% Plot the spectrograms
figure(13);

% Spectrogram for Sample 1
plot_spectrogram(Y.dressPass0001, Fs, window_length, OVERLAP, spectrogram_dB_scale, f_range, 321, 'Sample 1', new_Fs);

% Spectrogram for Sample 1 (Filtered)
plot_spectrogram(Y.filtered_dressPass0001, Fs, window_length, OVERLAP, spectrogram_dB_scale, f_range, 322, 'Sample 1 (Filtered)', new_Fs);

% Spectrogram for Sample 2
plot_spectrogram(Y.dressPass0050, Fs ,window_length, OVERLAP, spectrogram_dB_scale, f_range, 323, 'Sample 2', new_Fs);

% Spectrogram for Sample 2 (Filtered)
plot_spectrogram(Y.filtered_dressPass0050, Fs, window_length, OVERLAP, spectrogram_dB_scale, f_range, 324, 'Sample 2 (Filtered)', new_Fs);

% Spectrogram for Sample 3
plot_spectrogram(Y.dressPass0150, Fs, window_length, OVERLAP, spectrogram_dB_scale, f_range, 325, 'Sample 3', new_Fs);

% Spectrogram for Sample 3 (Filtered)
plot_spectrogram(Y.filtered_dressPass0150, Fs, window_length, OVERLAP, spectrogram_dB_scale, f_range, 326, 'Sample 3 (Filtered)', new_Fs);




%% Passo h

% Por fim, sintetizar uma breve discuss√£o dos resultados, com considera√ß√µes 
% finais e gerais, descrevendo: como os sinais das 3 condi√ß√µes estudadas se 
% comportam ao longo do tempo e da frequ√™ncia? Qual foi o impacto da 
% sele√ß√£o de uma banda de frequ√™ncia espec√≠fica e o que se observa quando 
% se compara os valores m√©dios da an√°lise est√°tistica com as diferentes 
% m√©tricas aplicadas dos sinais filtrados em rela√ß√£o aos n√£o filtrados
