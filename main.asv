% -------------------------------------- % 
%      IIOT - Homework 1                 %
%      Joao Victor Colombari Carlet      %
%      jvccarlet@usp.br                  %
% -------------------------------------- % 

%% Setup

close all 
clear

load("dressPass0001.mat");
load("dressPass0050.mat");
load("dressPass0150.mat");

Fs = 2e6;                   % Sampling frequency                    
T = 1/Fs;                   % Sampling period   

% Cuts the beggining and the end of the signal. Once the tool hasn't
% start passing yet, those parts are only noise. You can check the
% difference by comenting the following part or changing the filtred
% variable's name

dressPass0001 = cuts_signals(dressPass0001);
dressPass0050 = cuts_signals(dressPass0050);
dressPass0150 = cuts_signals(dressPass0150);

% All signals are being saved into structures in order to keep the
% workspace as clean as possible.

Y.dressPass0001 = dressPass0001;                    % Signal vectors
Y.dressPass0050 = dressPass0050;  
Y.dressPass0150 = dressPass0150;  

X.dressPass0001 = (0:length(dressPass0001)-1)*T;    % Time vectors
X.dressPass0050 = (0:length(dressPass0050)-1)*T;   
X.dressPass0150 = (0:length(dressPass0150)-1)*T;    

% Clears old variables 

clear dressPass0001; clear dressPass0050; clear dressPass0150;
clear filtered_dressPass0001; clear filtered_dressPass0050; clear filtered_dressPass0150;

%% A fazer

% - Verificar a escala dos graficos nas comparacoes

% - Trocar os arquivos do link do drive para os sem corte 

%% Step a
% Using Matlab, plot the three signals in the same figure, using the 
% subplot function, and adjust the x-axis scale to be in time 
% (in seconds), instead of the number of samples.

% Plot 
figure(1); 
sgtitle('Cutted signals');
subplot(3,1,1); plot(X.dressPass0001,Y.dressPass0001); 
title('Sample 1'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,1,2); plot(X.dressPass0050,Y.dressPass0050); 
title('Sample 2'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,1,3); plot(X.dressPass0150,Y.dressPass0150);
title('Sample 3'); ylabel('Amplitude'); xlabel('Time [s]');

%% Step b
% Obtain the frequency spectrum of the 3 signals using the Fast Fourier 
% Transform (FFT). Develop a script to perform this calculation for a 
% Hanning window of 8192 samples from a pure section of the signal. Plot 
% the resulting spectrum of each signal in a graph (containing the 3 
% signals in the same graph using the "hold on" function). Format the graph
% using legends, axis labels, appropriate font size and style. Adjust the 
% frequency scale (x-axis of the graph) to the range of 500 Hz to 15 kHz.
% Save the graph in ".fig" and ".jpg" formats (present in a text editor the 
% ".jpg" graph, the script used, and the steps of the process).

% Defining the graph's parameters 
f_min = 500;            % Hz
f_max = 15000;          % Hz

% Hanning windo with 8192 samples
window_length = 8192;
num_windows = 10;
hanning_window = hann(window_length);
X.freq_axis_8192 = linspace(0, Fs/2, window_length/2);

% Calculating FFT: signal_fft = FFT_hanning(signal, Fs, window_length)
Y.dressPass0001_fft_8192 = FFT_hanning(Y.dressPass0001,window_length,num_windows);
Y.dressPass0050_fft_8192 = FFT_hanning(Y.dressPass0050,window_length,num_windows);
Y.dressPass0150_fft_8192 = FFT_hanning(Y.dressPass0150,window_length,num_windows);

% Plots without the frequency cut 
figure(2); 
sgtitle('Unfiltered signals, whole spectrum');
subplot(3,1,1); plot(X.freq_axis_8192, Y.dressPass0001_fft_8192);
title('Sample 1'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,2); plot(X.freq_axis_8192, Y.dressPass0050_fft_8192); 
title('Sample 2'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,3); plot(X.freq_axis_8192, Y.dressPass0150_fft_8192); 
title('Sample 3'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

% Plots cutting between 500 and 15kHz
figure(3); 
sgtitle('Unfiltered signals, spectrum of interest');
subplot(3,1,1); plot(X.freq_axis_8192, Y.dressPass0001_fft_8192);
xlim([500 15e3]);
title('Sample 1'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,2); plot(X.freq_axis_8192, Y.dressPass0050_fft_8192); 
xlim([500 15e3]);
title('Sample 2'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,3); plot(X.freq_axis_8192, Y.dressPass0150_fft_8192); 
xlim([500 15e3]);
title('Sample 3'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

% It can be seen that the 8192 samples is quite small. The symptoms are
% the rougth traces. It can be made better increasing it!

% Compares between window sizes
% Hanning windo with 4*8192 samples
window_length = 4*8192;
num_windows = 10;
hanning_window = hann(window_length);
X.freq_axis_32768 = linspace(0, Fs/2, window_length/2);

% Calculating FFT: signal_fft = FFT_hanning(signal, Fs, window_length)
Y.dressPass0001_fft_32768 = FFT_hanning(Y.dressPass0001,window_length,num_windows);
Y.dressPass0050_fft_32768 = FFT_hanning(Y.dressPass0050,window_length,num_windows);
Y.dressPass0150_fft_32768 = FFT_hanning(Y.dressPass0150,window_length,num_windows);

figure(4); 
sgtitle('Comparisson between window sizes');
subplot(3,2,1); plot(X.freq_axis_8192, Y.dressPass0001_fft_8192);
xlim([500 15e3]);
title('Sample 1, 8192 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,2); plot(X.freq_axis_32768, Y.dressPass0001_fft_32768);
xlim([500 15e3]);
title('Sample 1, 32768 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,3); plot(X.freq_axis_8192, Y.dressPass0050_fft_8192); 
xlim([500 15e3]);
title('Sample 2, 8192 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,4); plot(X.freq_axis_32768, Y.dressPass0050_fft_32768); 
xlim([500 15e3]);
title('Sample 2, 32768 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,5); plot(X.freq_axis_8192, Y.dressPass0150_fft_8192); 
xlim([500 15e3]);
title('Sample 3, 8192 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,6); plot(X.freq_axis_32768, Y.dressPass0150_fft_32768); 
xlim([500 15e3]);
title('Sample 3, 32768 point window'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

%% Step c

% Observing the original graph in MATLAB (.fig), select a frequency band
% that best represents the conditions of the process explained earlier,
% that is, which represent the 3 conditions summarizing the process: 
% new tool, intermediate, and worn-out, based on the intensity and 
% frequency of the signals

% It was already shown that the 32768 point window giver a better view, so
% for this we will use it

% Plots cutting between 500 and 15kHz usign the 32768 points window
figure(5); 
sgtitle('Unfiltered signals, spectrum of interest, corrected widow size');
subplot(3,1,1); plot(X.freq_axis_32768, Y.dressPass0001_fft_32768);
xlim([500 15e3]);
title('Sample 1'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,2); plot(X.freq_axis_32768, Y.dressPass0050_fft_32768); 
xlim([500 15e3]);
title('Sample 2'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,1,3); plot(X.freq_axis_32768, Y.dressPass0150_fft_32768); 
xlim([500 15e3]);
title('Sample 3'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

%% Step d

% From the selection of this band, apply band-pass filters in the chosen 
% band on the 3 signals in the time domain, implementing the provided 
% function: "BandPassFilter‚Äù (Butterworth IIR Filter, use order 5)

% Filters for 15kHz and saves into workspace. It checks if there are
% already filtered signals in the directory. If not, it calls
% "filters_signals.m", that uses the "iir_filer.m" function to apply a
% fifth order bandpass filter from 500 to 15kHz

exists_0001 = exist('filtered_dressPass0001.mat', 'file');
exists_0050 = exist('filtered_dressPass0050.mat', 'file');
exists_0150 = exist('filtered_dressPass0150.mat', 'file');

if ~(exists_0001 && exists_0050 && exists_0150)
    run('filters_signals.m');
end

clear exists_0001; clear exists_0050; clear exists_0150;

load("filtered_dressPass0001.mat");
load("filtered_dressPass0050.mat");
load("filtered_dressPass0150.mat");

Y.filtered_dressPass0001 = filtered_dressPass0001;  
Y.filtered_dressPass0050 = filtered_dressPass0050; 
Y.filtered_dressPass0150 = filtered_dressPass0150;  

X.filtered_dressPass0001 = (0:length(Y.filtered_dressPass0001)-1)*T;   
X.filtered_dressPass0050 = (0:length(Y.filtered_dressPass0050)-1)*T;   
X.filtered_dressPass0150 = (0:length(Y.filtered_dressPass0150)-1)*T;  

Y.filtered_dressPass0001_fft_32768 = FFT_hanning(Y.filtered_dressPass0001,window_length,num_windows);
Y.filtered_dressPass0050_fft_32768 = FFT_hanning(Y.filtered_dressPass0050,window_length,num_windows);
Y.filtered_dressPass0150_fft_32768 = FFT_hanning(Y.filtered_dressPass0150,window_length,num_windows);

clear filtered_dressPass0001; clear filtered_dressPass0050; 
clear filtered_dressPass0150;

% Compares filtered to unfiltered signals in time dommain 
figure(6); 
sgtitle('Filtered to unfiltered signals comparisson in time dommain');
subplot(3,2,1); plot(X.dressPass0001, Y.dressPass0001);
title('Sample 1, unfiltered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,2); plot(X.filtered_dressPass0001, Y.filtered_dressPass0001);
title('Sample 1, filtered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,3); plot(X.dressPass0050, Y.dressPass0050);
title('Sample 2, unfiltered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,4); plot(X.filtered_dressPass0050, Y.filtered_dressPass0050);
title('Sample 2, filtered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,5); plot(X.dressPass0150, Y.dressPass0150);
title('Sample 3, unfiltered'); ylabel('Amplitude'); xlabel('Time [s]');
subplot(3,2,6); plot(X.filtered_dressPass0150, Y.filtered_dressPass0150);
title('Sample 3, filtered'); ylabel('Amplitude'); xlabel('Time [s]');

% Compares filtered to unfiltered signals in frequency dommain 
figure(7); 
sgtitle('Filtered to unfiltered signals comparisson in frequency dommain');
subplot(3,2,1); plot(X.freq_axis_32768, Y.dressPass0001_fft_32768);
title('Sample 1, unfiltered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,2); plot(X.freq_axis_32768, Y.filtered_dressPass0001_fft_32768);
title('Sample 1, filtered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,3); plot(X.freq_axis_32768, Y.dressPass0050_fft_32768);
title('Sample 2, unfiltered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,4); plot(X.freq_axis_32768, Y.filtered_dressPass0050_fft_32768);
title('Sample 2, filtered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,5); plot(X.freq_axis_32768, Y.dressPass0150_fft_32768);
title('Sample 3, unfiltered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');
subplot(3,2,6); plot(X.freq_axis_32768, Y.filtered_dressPass0150_fft_32768);
title('Sample 3, filtered'); ylabel('Amplitude'); xlabel('Frequency [Hz]');

%% Step e

% Calculate the RMS (root mean square) for the filtered signals, resulting 
% from the process requested in item "c", considering blocks of 2048 samples 
% in the pure signal. Use the provided function ‚ÄúRMSCalculation‚Äù. Repeat the 
% process, calculating the RMS every 2048 samples for the pure (unfiltered) 
% signals. Plot the signals of each condition (RMS with and without filter) 
% on the same graph using the ‚Äúhold on‚Äù command. Plot the 3 graphs in the 
% same figure using the subplot function. Format the graphs, adjusting 
% legends, axis labels, font size and style, etc. Save the files in ‚Äú.fig‚Äù 
% and ‚Äú.jpg‚Äù formats (to present in a document along with the developed 
% script and the steps performed).

% Defining block size
block_size = 2048;

% Now the function calculate_rms is used. It calculates the RMS for each 
% block of 'block_size' samples in the given vector. If there are leftover
% samples that won't fit the window size, calculate RMS for the last 
% partial window. Repeat each RMS value to match the window size for 
% consistent length, so the resulting vector's length matches the input's
% vector one

Y.rms_filtered_dressPass0001 = calculate_rms(Y.filtered_dressPass0001, block_size);
Y.rms_filtered_dressPass0050 = calculate_rms(Y.filtered_dressPass0050, block_size);
Y.rms_filtered_dressPass0150 = calculate_rms(Y.filtered_dressPass0150, block_size);

Y.rms_dressPass0001 = calculate_rms(Y.dressPass0001, block_size);
Y.rms_dressPass0050 = calculate_rms(Y.dressPass0050, block_size);
Y.rms_dressPass0150 = calculate_rms(Y.dressPass0150, block_size);

% Plots the resulting RMS vectors for filtered and unfiltered in the same
% graph
figure(8); 
sgtitle('Filtered to unfiltered RMS comparison')
subplot(3,1,1);
plot(X.filtered_dressPass0001, Y.rms_filtered_dressPass0001); hold on; 
plot(X.dressPass0001, Y.rms_dressPass0001); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('RMS'); 
title('RMS sample 1');
subplot(3,1,2);
plot(X.filtered_dressPass0050, Y.rms_filtered_dressPass0050); hold on; 
plot(X.dressPass0050, Y.rms_dressPass0050); 
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('RMS'); 
title('RMS sample 2');
subplot(3,1,3);
plot(X.filtered_dressPass0150, Y.rms_filtered_dressPass0150); hold on; 
plot(X.dressPass0150, Y.rms_dressPass0150);
legend('Filtered','Unfiltered'); xlabel('Time [s]'); ylabel('RMS'); 
title('RMS sample 3');


%% Step f

% Calculate the mean value and standard deviation of the RMS signals obtained
% in item "d" for each of the three tool conditions, with and without filtering,
% and plot the results on the same graph (using MATLAB's "errorbar" command).
% Format the graph by adding a legend to identify the signals, adjusting font,
% axis labels, etc. Save the files in ".fig" and "jpg" formats (to present in
% a text document along with the developed script and the steps performed).

% I did not understand what was suposed to be done, so ill just do both
% ways possible:
%
%   - 1st: Calculate the mean over the whole vector and pick some points of
%   the filtered vector (not the RMS one) to calculate the errorbars 
% 
%   - 2nd: Calulate the windowed mean, and the windowed std for the
%   filtered signal (not RMS) and plot the mean with the std around it. In
%   this case, that I rather use, the errorbars are less usefull than a
%   shaded plot around the mean

choice = '2nd';  % Choose between '1st' or '2nd' options

switch choice
    case '1st'
        run("step_f_1st_choice.m");
    case '2nd'
        run("step_f_2nd_choice.m");
    otherwise
        error('Invalid choice. Please select either ''1st'' or ''2nd''.');
end

clear choice;


%% Passo g

% Repita os passos e) e f) substituindo o RMS pelo c√°lculo da a energia do 
% sinal, kurtosis e skewness. No entanto, para o passo f), calcular apenas 
% a m√©dia, plotar sinais no formato de gr√°fico de barras, comparando os 
% sinais filtrados com sem filtro

% Calcular a energia do sinal para os sinais filtrados 
energy_filtered_dressPass0001 = zeros(1, num_blocks);
energy_filtered_dressPass0050 = zeros(1, num_blocks);
energy_filtered_dressPass0150 = zeros(1, num_blocks);

for i = 1:num_blocks
    start_index = (i - 1) * block_size + 1;
    end_index = i * block_size;
    energy_filtered_dressPass0001(i) = sum(filtered_dressPass0001(start_index:end_index).^2);
    energy_filtered_dressPass0050(i) = sum(filtered_dressPass0050(start_index:end_index).^2);
    energy_filtered_dressPass0150(i) = sum(filtered_dressPass0150(start_index:end_index).^2);
end

% Calcular a energia do sinal para os sinais nao filtrados 
energy_dressPass0001 = zeros(1, num_blocks);
energy_dressPass0050 = zeros(1, num_blocks);
energy_dressPass0150 = zeros(1, num_blocks);

for i = 1:num_blocks
    start_index = (i - 1) * block_size + 1;
    end_index = i * block_size;
    energy_dressPass0001(i) = sum(dressPass0001(start_index:end_index).^2);
    energy_dressPass0050(i) = sum(dressPass0050(start_index:end_index).^2);
    energy_dressPass0150(i) = sum(dressPass0150(start_index:end_index).^2);
end

mean_energy_filtered = [mean(energy_filtered_dressPass0001) ...
                         mean(energy_filtered_dressPass0050) ...
                         mean(energy_filtered_dressPass0150)];

mean_energy_unfiltered = [mean(energy_dressPass0001) ...
                         mean(energy_dressPass0050) ...
                         mean(energy_dressPass0150)];


% Calcular a kurtosis para os sinais filtrados 
kurtosis_filtered_dressPass0001 = zeros(1, num_blocks);
kurtosis_filtered_dressPass0050 = zeros(1, num_blocks);
kurtosis_filtered_dressPass0150 = zeros(1, num_blocks);

for i = 1:num_blocks
    start_index = (i - 1) * block_size + 1;
    end_index = i * block_size;
    kurtosis_filtered_dressPass0001(i) = kurtosis(filtered_dressPass0001(start_index:end_index),0);
    kurtosis_filtered_dressPass0050(i) = kurtosis(filtered_dressPass0050(start_index:end_index),0);
    kurtosis_filtered_dressPass0150(i) = kurtosis(filtered_dressPass0150(start_index:end_index),0);
end

% Calcular a kurtosis para os sinais nao filtrados 
kurtosis_dressPass0001 = zeros(1, num_blocks);
kurtosis_dressPass0050 = zeros(1, num_blocks);
kurtosis_dressPass0150 = zeros(1, num_blocks);

for i = 1:num_blocks
    start_index = (i - 1) * block_size + 1;
    end_index = i * block_size;
    kurtosis_dressPass0001(i) = kurtosis(dressPass0001(start_index:end_index),0);
    kurtosis_dressPass0050(i) = kurtosis(dressPass0050(start_index:end_index),0);
    kurtosis_dressPass0150(i) = kurtosis(dressPass0150(start_index:end_index),0);
end

mean_kurtosis_filtered = [mean(kurtosis_filtered_dressPass0001) ...
                          mean(kurtosis_filtered_dressPass0050) ...
                          mean(kurtosis_filtered_dressPass0150)];

mean_kurtosis_unfiltered = [mean(kurtosis_dressPass0001) ...
                          mean(kurtosis_dressPass0050) ...
                          mean(kurtosis_dressPass0150)];

% Calcular a skewness para os sinais filtrados 
skewness_filtered_dressPass0001 = zeros(1, num_blocks);
skewness_filtered_dressPass0050 = zeros(1, num_blocks);
skewness_filtered_dressPass0150 = zeros(1, num_blocks);

for i = 1:num_blocks
    start_index = (i - 1) * block_size + 1;
    end_index = i * block_size;
    skewness_filtered_dressPass0001(i) = skewness(filtered_dressPass0001(start_index:end_index),0);
    skewness_filtered_dressPass0050(i) = skewness(filtered_dressPass0050(start_index:end_index),0);
    skewness_filtered_dressPass0150(i) = skewness(filtered_dressPass0150(start_index:end_index),0);
end

% Calcular a skewness para os sinais nao filtrados 
skewness_dressPass0001 = zeros(1, num_blocks);
skewness_dressPass0050 = zeros(1, num_blocks);
skewness_dressPass0150 = zeros(1, num_blocks);

for i = 1:num_blocks
    start_index = (i - 1) * block_size + 1;
    end_index = i * block_size;
    skewness_dressPass0001(i) = skewness(dressPass0001(start_index:end_index),0);
    skewness_dressPass0050(i) = skewness(dressPass0050(start_index:end_index),0);
    skewness_dressPass0150(i) = skewness(dressPass0150(start_index:end_index),0);
end

mean_skewness_filtered = [mean(skewness_filtered_dressPass0001) ...
                          mean(skewness_filtered_dressPass0050) ...
                          mean(skewness_filtered_dressPass0150)];

mean_skewness_unfiltered = [mean(skewness_dressPass0001) ...
                          mean(skewness_dressPass0050) ...
                          mean(skewness_dressPass0150)];

% Plotar o resultado em um mesmo gr√°fico usando errorbar
figure(8);

subplot(3,2,1); 
bar(1:3, mean_energy_filtered, 'DisplayName', 'Filtrado');
xlim([0.5 3.5]); xticks(1:1:3); 
legend('Media energia filtrado'); xlabel('Amostra'); ylabel('Magnitude'); 
title('Estatisticas amostras filtradas');

subplot(3,2,2); 
bar(1:3, mean_energy_unfiltered, 'DisplayName', 'Filtrado');
xlim([0.5 3.5]); xticks(1:1:3); 
legend('Media energia nao filtrado'); xlabel('Amostra'); ylabel('Magnitude'); 
title('Estatisticas amostras filtradas');

subplot(3,2,3); 
bar(1:3, mean_kurtosis_filtered, 'DisplayName', 'Filtrado');
xlim([0.5 3.5]); xticks(1:1:3); 
legend('Media kurtosis filtrado'); xlabel('Amostra'); ylabel('Magnitude'); 
title('Estatisticas amostras filtradas');

subplot(3,2,4); 
bar(1:3, mean_kurtosis_unfiltered, 'DisplayName', 'Filtrado');
xlim([0.5 3.5]); xticks(1:1:3); 
legend('Media kurtosis nao filtrado'); xlabel('Amostra'); ylabel('Magnitude'); 
title('Estatisticas amostras filtradas');

subplot(3,2,5); 
bar(1:3, mean_skewness_filtered, 'DisplayName', 'Filtrado');
xlim([0.5 3.5]); xticks(1:1:3); 
legend('Media skewness filtrado'); xlabel('Amostra'); ylabel('Magnitude'); 
title('Estatisticas amostras filtradas');

subplot(3,2,6); 
bar(1:3, mean_skewness_unfiltered, 'DisplayName', 'Filtrado');
xlim([0.5 3.5]); xticks(1:1:3); 
legend('Media skewness nao filtrado'); xlabel('Amostra'); ylabel('Magnitude'); 
title('Estatisticas amostras filtradas');



%% Passo h

% Por fim, sintetizar uma breve discuss√£o dos resultados, com considera√ß√µes 
% finais e gerais, descrevendo: como os sinais das 3 condi√ß√µes estudadas se 
% comportam ao longo do tempo e da frequ√™ncia? Qual foi o impacto da 
% sele√ß√£o de uma banda de frequ√™ncia espec√≠fica e o que se observa quando 
% se compara os valores m√©dios da an√°lise est√°tistica com as diferentes 
% m√©tricas aplicadas dos sinais filtrados em rela√ß√£o aos n√£o filtrados



%%

% plot(f,fft_single_dressPass0001,"LineWidth",3) 
% title("Single-Sided Amplitude Spectrum of X(t)")
% xlabel("f (Hz)")
% ylabel("|P1(f)|")